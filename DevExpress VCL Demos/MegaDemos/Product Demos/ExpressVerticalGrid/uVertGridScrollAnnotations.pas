unit uVertGridScrollAnnotations;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, dxVertGridFrame, cxGraphics, cxControls,
  cxLookAndFeels, cxLookAndFeelPainters, dxSkinsCore, dxLayoutContainer, cxClasses, dxLayoutLookAndFeels,
  System.Actions, Vcl.ActnList, dxLayoutControl, cxDBVGrid,
  cxStyles, cxEdit, cxInplaceContainer, cxVGrid,
  dxScrollbarAnnotationControlPanel, cxCalendar, dxScrollbarAnnotations,
  cxFilter;

type
  TfrmScrollAnnotations = class(TVerticalGridFrame)
    cxDBVerticalGrid1: TcxDBVerticalGrid;
    dxLayoutItem1: TdxLayoutItem;
    frScrollbarAnnotationControlPanel1: TfrScrollbarAnnotationControlPanel;
    dxLayoutItem2: TdxLayoutItem;
    cxDBVerticalGrid1TaskName: TcxDBEditorRow;
    cxDBVerticalGrid1FullEmployeeName: TcxDBEditorRow;
    cxDBVerticalGrid1StartDate: TcxDBEditorRow;
    cxDBVerticalGrid1DueDate: TcxDBEditorRow;
    cxDBVerticalGrid1Status: TcxDBEditorRow;
    cxDBVerticalGrid1Description: TcxDBEditorRow;
    cxDBVerticalGrid1Priority: TcxDBEditorRow;
    cxDBVerticalGrid1Completed: TcxDBEditorRow;
    cxDBVerticalGrid1DBEditorRow1: TcxDBEditorRow;
    procedure cxDBVerticalGrid1DueDatePropertiesValidateDrawValue(
      Sender: TcxCustomEditorRowProperties; ARecordIndex: Integer;
      const AValue: Variant; AData: TcxEditValidateInfo);
    procedure cxDBVerticalGrid1GetScrollbarAnnotationHint(Sender: TObject; AAnnotationRowIndexLists: TdxScrollbarAnnotationRowIndexLists; var AHint: string);
    procedure cxDBVerticalGrid1KeyDown(Sender: TObject; var Key: Word; Shift: TShiftState);
    procedure cxDBVerticalGrid1StylesGetContentStyle(Sender: TObject;
      AEditProp: TcxCustomEditorRowProperties; AFocused: Boolean;
      ARecordIndex: Integer; var AStyle: TcxStyle);
  private
    procedure AnnotationStyleChanged(Sender: TObject);
    { Private declarations }
  protected
    function GetDescription: string; override;
  public
    constructor Create(AOwner: TComponent); override;
  end;

implementation

{$R *.dfm}

uses
  DateUtils, StrUtils, dxCore, dxFrames, FrameIDs, uStrsConst, dxAutoGenerateData;

{ TfrmScrollAnnotations }

constructor TfrmScrollAnnotations.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
  cxDBVerticalGrid1.DataController.FindCriteria.Text := 'Customer';
  SAnnotationNames[dxFocusedRowScrollbarAnnotationID] := 'Focused Record';
  frScrollbarAnnotationControlPanel1.Initialize([dxFocusedRowScrollbarAnnotationID..dxErrorScrollbarAnnotationID]);
  frScrollbarAnnotationControlPanel1.OnAnnotationStyleChanged := AnnotationStyleChanged;
end;

procedure TfrmScrollAnnotations.cxDBVerticalGrid1DueDatePropertiesValidateDrawValue(
  Sender: TcxCustomEditorRowProperties; ARecordIndex: Integer;
  const AValue: Variant; AData: TcxEditValidateInfo);
begin
  if not VarIsNull(AValue) and (VarToDateTime(AValue) < Date) and
    not cxDBVerticalGrid1Completed.Properties.Values[ARecordIndex] then
  begin
    AData.ErrorType := eetError;
    AData.ErrorText := Format('Late by %d days', [DaysBetween(Date, VarToDateTime(AValue))]);
  end;
end;

procedure TfrmScrollAnnotations.AnnotationStyleChanged(Sender: TObject);
begin
  cxDBVerticalGrid1.BeginUpdate;
  cxDBVerticalGrid1.ScrollbarAnnotations.ShowErrors := dxErrorScrollbarAnnotationID in frScrollbarAnnotationControlPanel1.VisibleAnnotaionKinds;
  cxDBVerticalGrid1.ScrollbarAnnotations.ShowSearchResults := dxSearchResultScrollbarAnnotationID in frScrollbarAnnotationControlPanel1.VisibleAnnotaionKinds;
  cxDBVerticalGrid1.ScrollbarAnnotations.ShowFocusedRow := dxFocusedRowScrollbarAnnotationID in frScrollbarAnnotationControlPanel1.VisibleAnnotaionKinds;
  cxDBVerticalGrid1.LookAndFeel.Refresh;
  cxDBVerticalGrid1.EndUpdate;
end;

procedure TfrmScrollAnnotations.cxDBVerticalGrid1GetScrollbarAnnotationHint(Sender: TObject; AAnnotationRowIndexLists: TdxScrollbarAnnotationRowIndexLists; var AHint: string);
var
  AAnnotationRowIndexList: TdxScrollbarAnnotationRowIndexList;
  ARowIndex: Integer;
begin
  AHint := '';
  if AAnnotationRowIndexLists.TryGetValue(dxErrorScrollbarAnnotationID, AAnnotationRowIndexList) then
  begin
    for ARowIndex in AAnnotationRowIndexList do
      AHint := AHint + IfThen(AHint <> '', dxCRLF) + Format('%s is late by %d days',
        [cxDBVerticalGrid1TaskName.Properties.Values[ARowIndex],
         DaysBetween(Date, VarToDateTime(cxDBVerticalGrid1DueDate.Properties.Values[ARowIndex]))]);
  end;
end;

procedure TfrmScrollAnnotations.cxDBVerticalGrid1KeyDown(Sender: TObject; var Key: Word; Shift: TShiftState);
begin
  if Key = VK_F2 then
    cxDBVerticalGrid1.GoToNextScrollbarAnnotation([dxErrorScrollbarAnnotationID], not (ssShift in Shift))
end;

procedure TfrmScrollAnnotations.cxDBVerticalGrid1StylesGetContentStyle(
  Sender: TObject; AEditProp: TcxCustomEditorRowProperties; AFocused: Boolean;
  ARecordIndex: Integer; var AStyle: TcxStyle);
begin
  if ARecordIndex = -1 then
    Exit;
  if cxDBVerticalGrid1Completed.Properties.Values[ARecordIndex] then
    AStyle := dmAutoGenerateData.cxStyle1;
end;

{ TfrmScrollAnnotations }

function TfrmScrollAnnotations.GetDescription: string;
begin
  Result := sdxFrameVeritcalGridScrollbarAnnotationsDescription;
end;

initialization
  dxFrameManager.RegisterFrame(VerticalGridScrollAnnotationsFrameID, TfrmScrollAnnotations,
    VerticalGridScrollAnnotationsName, -1, NewAndHighlightedGroupIndex, VerticalGridSideBarGroupIndex);

end.
