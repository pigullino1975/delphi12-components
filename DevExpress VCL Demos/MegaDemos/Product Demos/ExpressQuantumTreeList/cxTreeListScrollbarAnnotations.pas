unit cxTreeListScrollbarAnnotations;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, cxDBTreeListBaseFormUnit, cxGraphics,
  cxControls, cxLookAndFeels, cxLookAndFeelPainters, dxSkinsCore, cxCustomData, cxStyles, cxTL, dxLayoutContainer,
  System.Actions, Vcl.ActnList, cxClasses, dxLayoutLookAndFeels,
  cxInplaceContainer, cxTLData, cxDBTL, dxLayoutControl,
  dxScrollbarAnnotationControlPanel, cxMaskEdit, cxCalendar, dxScrollbarAnnotations,
  cxImageComboBox, cxProgressBar, cxEdit, cxTLdxBarBuiltInMenu, cxFilter;

type
  TfrmScrollbarAnnotations = class(TcxDBTreeListDemoUnitForm)
    dxLayoutItem2: TdxLayoutItem;
    frScrollbarAnnotationControlPanel1: TfrScrollbarAnnotationControlPanel;
    tlDBTaskName: TcxDBTreeListColumn;
    tlDBFullEmployeeName: TcxDBTreeListColumn;
    tlDBStartDate: TcxDBTreeListColumn;
    tlDBDueDate: TcxDBTreeListColumn;
    tlDBStatus: TcxDBTreeListColumn;
    tlDBDescription: TcxDBTreeListColumn;
    tlDBPriority: TcxDBTreeListColumn;
    tlDBDescriptionVisibility: TcxDBTreeListColumn;
    tlDBCompleted: TcxDBTreeListColumn;
    procedure tlDBDueDateValidateDrawValue(Sender: TcxTreeListColumn; ANode: TcxTreeListNode; const AValue: Variant; AData: TcxEditValidateInfo);
    procedure tlDBGetCellHint(Sender: TcxCustomTreeList; ACell: TObject; var AText: string; var ANeedShow: Boolean);
    procedure tlDBGetScrollbarAnnotationHint(Sender: TObject; AAnnotationRowIndexLists: TdxScrollbarAnnotationRowIndexLists; var AHint: string);
    procedure tlDBKeyDown(Sender: TObject; var Key: Word; Shift: TShiftState);
    procedure tlDBStylesGetContentStyle(Sender: TcxCustomTreeList;
      AColumn: TcxTreeListColumn; ANode: TcxTreeListNode; var AStyle: TcxStyle);
  private
    procedure AnnotationStyleChanged(Sender: TObject);
    { Private declarations }
  public
    procedure FrameActivated; override;
    class function GetID: Integer; override;
    { Public declarations }
  end;

var
  frmScrollbarAnnotations: TfrmScrollbarAnnotations;

implementation

{$R *.dfm}

uses
  DateUtils, dxCore, StrUtils, dxAutoGenerateData;

procedure TfrmScrollbarAnnotations.AnnotationStyleChanged(Sender: TObject);
begin
  tlDB.BeginUpdate;
  tlDB.ScrollbarAnnotations.ShowErrors := dxErrorScrollbarAnnotationID in frScrollbarAnnotationControlPanel1.VisibleAnnotaionKinds;
  tlDB.ScrollbarAnnotations.ShowSearchResults := dxSearchResultScrollbarAnnotationID in frScrollbarAnnotationControlPanel1.VisibleAnnotaionKinds;
  tlDB.ScrollbarAnnotations.ShowFocusedRow := dxFocusedRowScrollbarAnnotationID in frScrollbarAnnotationControlPanel1.VisibleAnnotaionKinds;
  tlDB.ScrollbarAnnotations.ShowSelectedRows := dxSelectedRowScrollbarAnnotationID in frScrollbarAnnotationControlPanel1.VisibleAnnotaionKinds;
  tlDB.LookAndFeel.Refresh;
  tlDB.EndUpdate;
end;

{ TfrmScrollbarAnnotations }

procedure TfrmScrollbarAnnotations.FrameActivated;
begin
  inherited FrameActivated;
  tlDB.FindCriteria.Text := 'Customer';
  SAnnotationNames[dxSelectedRowScrollbarAnnotationID] := 'Selected Nodes';
  SAnnotationNames[dxFocusedRowScrollbarAnnotationID] := 'Focused Node';
  frScrollbarAnnotationControlPanel1.Initialize;
  frScrollbarAnnotationControlPanel1.OnAnnotationStyleChanged := AnnotationStyleChanged;
  tlDB.Root.Expand(True);
end;

class function TfrmScrollbarAnnotations.GetID: Integer;
begin
  Result := 61;
end;

procedure TfrmScrollbarAnnotations.tlDBDueDateValidateDrawValue(Sender: TcxTreeListColumn; ANode: TcxTreeListNode; const AValue: Variant; AData: TcxEditValidateInfo);
begin
  if not VarIsNull(AValue) and (VarToDateTime(AValue) < Date) and not ANode.Values[tlDBCompleted.ItemIndex] then
  begin
    AData.ErrorType := eetError;
    AData.ErrorText := Format('Late by %d days', [DaysBetween(Date, VarToDateTime(AValue))]);
  end;
end;

procedure TfrmScrollbarAnnotations.tlDBGetCellHint(Sender: TcxCustomTreeList; ACell: TObject; var AText: string; var ANeedShow: Boolean);
var
  AHeader: TcxTreeListColumnHeaderCellViewInfo;
  AEditCell: TcxTreeListEditCellViewInfo;
begin
  if ACell is TcxTreeListColumnHeaderCellViewInfo  then
  begin
    AHeader := TcxTreeListColumnHeaderCellViewInfo(ACell);
    if AHeader.Column = tlDBCompleted then
    begin
      AText := 'Completed';
      ANeedShow := True;
    end
    else
      if AHeader.Column = tlDBPriority then
      begin
        AText := 'Priority';
        ANeedShow := True;
      end
      else
        if AHeader.Column = tlDBDescriptionVisibility then
        begin
          AText := 'Description';
          ANeedShow := True;
        end
  end
  else
    if ACell is TcxTreeListEditCellViewInfo then
    begin
      AEditCell := TcxTreeListEditCellViewInfo(ACell);
      if AEditCell.Column = tlDBDescriptionVisibility then
      begin
        AText := AEditCell.Node.Texts[tlDBDescription.ItemIndex];
        ANeedShow := True;
      end;
    end;
end;

procedure TfrmScrollbarAnnotations.tlDBGetScrollbarAnnotationHint(Sender: TObject;
  AAnnotationRowIndexLists: TdxScrollbarAnnotationRowIndexLists; var AHint: string);

  function GetValue(ARecordIndex: Integer; AColumn: TcxTreeListColumn): Variant;
  begin
    Result := tlDB.AbsoluteVisibleItems[ARecordIndex].Values[AColumn.ItemIndex]
  end;

var
  AAnnotationRowIndexList: TdxScrollbarAnnotationRowIndexList;
  ANodeIndex: Integer;
begin
  AHint := '';
  if AAnnotationRowIndexLists.TryGetValue(dxErrorScrollbarAnnotationID, AAnnotationRowIndexList) then
  begin
    for ANodeIndex in AAnnotationRowIndexList do
      AHint := AHint + IfThen(AHint <> '', dxCRLF) + Format('%s is late by %d days',
        [GetValue(ANodeIndex, tlDBTaskName),
         DaysBetween(Date, VarToDateTime(GetValue(ANodeIndex, tlDBDueDate)))]);
  end;
end;

procedure TfrmScrollbarAnnotations.tlDBKeyDown(Sender: TObject; var Key: Word; Shift: TShiftState);
begin
  if Key = VK_F2 then
    tlDB.GoToNextScrollbarAnnotation([dxErrorScrollbarAnnotationID], not (ssShift in Shift))

end;

procedure TfrmScrollbarAnnotations.tlDBStylesGetContentStyle(
  Sender: TcxCustomTreeList; AColumn: TcxTreeListColumn; ANode: TcxTreeListNode;
  var AStyle: TcxStyle);
begin
  if ANode.Values[tlDBCompleted.ItemIndex] then
    AStyle := dmAutoGenerateData.cxStyle1;
end;

initialization
  TfrmScrollbarAnnotations.Register;

end.
