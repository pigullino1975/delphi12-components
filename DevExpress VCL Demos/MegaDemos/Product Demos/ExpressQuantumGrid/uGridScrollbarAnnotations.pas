unit uGridScrollbarAnnotations;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, dxGridFrame, cxGraphics, cxControls,
  cxLookAndFeels, cxLookAndFeelPainters, cxStyles, dxLayoutContainer,
  System.Actions, Vcl.ActnList, cxClasses, cxGrid,
  dxLayoutControl, cxCustomData, cxFilter, cxData, cxDataStorage, cxEdit,
  cxNavigator, dxDateRanges, Data.DB, cxDBData, cxGridCustomView,
  cxGridCustomTableView, cxGridTableView, cxGridBandedTableView,
  cxGridDBBandedTableView, cxGridLevel, maindata, cxCurrencyEdit, cxSpinEdit,
  cxDataControllerConditionalFormattingRulesManagerDialog,
  dxLayoutControlAdapters, Vcl.StdCtrls, cxRadioGroup, dxLayoutcxEditAdapters,
  cxContainer, cxTextEdit, cxMaskEdit, cxDropDownEdit, cxCheckBox,
  dxLayoutLookAndFeels, cxGridDBTableView, dxSkinsCore, dxScrollbarAnnotationControlPanel, cxCalendar, dxScrollbarAnnotations,
  cxGroupBox, dxPanel, cxGeometry, dxFramedControl, dxDPIAwareUtils;

type
  TfrmGridScrollbarAnnotations = class(TdxGridFrame)
    GridLevel1: TcxGridLevel;
    GridDBTableView1: TcxGridDBTableView;
    frScrollbarAnnotationControlPanel1: TfrScrollbarAnnotationControlPanel;
    dxLayoutItem1: TdxLayoutItem;
    dxLayoutGroup1: TdxLayoutGroup;
    GridDBTableView1TaskId: TcxGridDBColumn;
    GridDBTableView1ParentTaskId: TcxGridDBColumn;
    GridDBTableView1TaskName: TcxGridDBColumn;
    GridDBTableView1FullEmployeeName: TcxGridDBColumn;
    GridDBTableView1StartDate: TcxGridDBColumn;
    GridDBTableView1DueDate: TcxGridDBColumn;
    GridDBTableView1Status: TcxGridDBColumn;
    GridDBTableView1Description: TcxGridDBColumn;
    GridDBTableView1Priority: TcxGridDBColumn;
    GridDBTableView1Completed: TcxGridDBColumn;
    GridDBTableView1DescriptionVisibility: TcxGridDBColumn;
    procedure GridDBTableView1DescriptionVisibilityGetCellHint(Sender: TcxCustomGridTableItem; ARecord: TcxCustomGridRecord; ACellViewInfo: TcxGridTableDataCellViewInfo; const AMousePos: TPoint; var AHintText: TCaption; var AIsHintMultiLine: Boolean; var AHintTextRect: TRect);
    procedure GridDBTableView1DueDateValidateDrawValue(Sender: TcxCustomGridTableItem; ARecord: TcxCustomGridRecord; const AValue: Variant; AData: TcxEditValidateInfo);
    procedure GridDBTableView1StylesGetContentStyle(
      Sender: TcxCustomGridTableView; ARecord: TcxCustomGridRecord;
      AItem: TcxCustomGridTableItem; var AStyle: TcxStyle);
    procedure GridDBTableView1DescriptionVisibilityStylesGetContentStyle(
      Sender: TcxCustomGridTableView; ARecord: TcxCustomGridRecord;
      AItem: TcxCustomGridTableItem; var AStyle: TcxStyle);
    procedure GridDBTableView1GetScrollbarAnnotationHint(Sender: TcxCustomGridTableView; AAnnotationRowIndexLists: TdxScrollbarAnnotationRowIndexLists; var AHint: string);
    procedure GridDBTableView1KeyDown(Sender: TObject; var Key: Word; Shift: TShiftState);
    procedure FrameResize(Sender: TObject);
  private
    procedure AnnotationStyleChanged(Sender: TObject);
    { Private declarations }
  protected
    function GetDescription: string; override;
    function NeedSetup: Boolean; override;
  public
    constructor Create(AOwner: TComponent); override;
    { Public declarations }
  end;

var
  frmGridScrollbarAnnotations: TfrmGridScrollbarAnnotations;

implementation

{$R *.dfm}

uses
  DateUtils, StrUtils, dxCore, dxFrames, FrameIDs, uStrsConst, dxAutoGenerateData;

{ TdxmdGridFrame }

constructor TfrmGridScrollbarAnnotations.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
  GridDBTableView1.DataController.FindCriteria.Text := 'Customer';
  frScrollbarAnnotationControlPanel1.Initialize;
  frScrollbarAnnotationControlPanel1.OnAnnotationStyleChanged := AnnotationStyleChanged;
end;

procedure TfrmGridScrollbarAnnotations.FrameResize(Sender: TObject);
begin
  inherited;
  frScrollbarAnnotationControlPanel1.AutoSize := False;
  frScrollbarAnnotationControlPanel1.ScaleForPPI(dxGetCurrentDPI(Self));
end;

procedure TfrmGridScrollbarAnnotations.AnnotationStyleChanged(Sender: TObject);
begin
  Grid.BeginUpdate;
  GridDBTableView1.ScrollbarAnnotations.ShowErrors := dxErrorScrollbarAnnotationID in frScrollbarAnnotationControlPanel1.VisibleAnnotaionKinds;
  GridDBTableView1.ScrollbarAnnotations.ShowSearchResults := dxSearchResultScrollbarAnnotationID in frScrollbarAnnotationControlPanel1.VisibleAnnotaionKinds;
  GridDBTableView1.ScrollbarAnnotations.ShowFocusedRow := dxFocusedRowScrollbarAnnotationID in frScrollbarAnnotationControlPanel1.VisibleAnnotaionKinds;
  GridDBTableView1.ScrollbarAnnotations.ShowSelectedRows := dxSelectedRowScrollbarAnnotationID in frScrollbarAnnotationControlPanel1.VisibleAnnotaionKinds;
  Grid.LookAndFeel.Refresh;
  Grid.EndUpdate;
end;

function TfrmGridScrollbarAnnotations.GetDescription: string;
begin
  Result := sdxFrameScrollbarAnnotationsDescription;
end;

procedure TfrmGridScrollbarAnnotations.GridDBTableView1DescriptionVisibilityGetCellHint(Sender: TcxCustomGridTableItem; ARecord: TcxCustomGridRecord; ACellViewInfo: TcxGridTableDataCellViewInfo; const AMousePos: TPoint; var AHintText: TCaption; var AIsHintMultiLine: Boolean; var AHintTextRect: TRect);
begin
  if ACellViewInfo.Value then
    AHintText := ACellViewInfo.GridRecord.Values[GridDBTableView1Description.Index]
  else
    AHintText := '';
end;

procedure TfrmGridScrollbarAnnotations.GridDBTableView1DescriptionVisibilityStylesGetContentStyle(
  Sender: TcxCustomGridTableView; ARecord: TcxCustomGridRecord;
  AItem: TcxCustomGridTableItem; var AStyle: TcxStyle);
begin
  AStyle := dmAutoGenerateData.cxStyle2;
end;

procedure TfrmGridScrollbarAnnotations.GridDBTableView1DueDateValidateDrawValue(Sender: TcxCustomGridTableItem; ARecord: TcxCustomGridRecord; const AValue: Variant; AData: TcxEditValidateInfo);
begin
  if not VarIsNull(AValue) and (VarToDateTime(AValue) < Date) and not ARecord.Values[GridDBTableView1Completed.Index] then
  begin
    AData.ErrorType := eetError;
    AData.ErrorText := Format('Late by %d days', [DaysBetween(Date, VarToDateTime(AValue))]);
  end;
end;

procedure TfrmGridScrollbarAnnotations.GridDBTableView1GetScrollbarAnnotationHint(Sender: TcxCustomGridTableView; AAnnotationRowIndexLists: TdxScrollbarAnnotationRowIndexLists; var AHint: string);
var
  AAnnotationRowIndexList: TdxScrollbarAnnotationRowIndexList;
  ARowIndex: Integer;
begin
  AHint := '';
  if AAnnotationRowIndexLists.TryGetValue(dxErrorScrollbarAnnotationID, AAnnotationRowIndexList) then
  begin
    for ARowIndex in AAnnotationRowIndexList do
      AHint := AHint + IfThen(AHint <> '', dxCRLF) + Format('%s is late by %d days',
        [GridDBTableView1.ViewData.Rows[ARowIndex].Values[GridDBTableView1TaskName.Index],
         DaysBetween(Date, VarToDateTime(GridDBTableView1.ViewData.Rows[ARowIndex].Values[GridDBTableView1DueDate.Index]))]);
  end;
end;

procedure TfrmGridScrollbarAnnotations.GridDBTableView1KeyDown(Sender: TObject; var Key: Word; Shift: TShiftState);
begin
  if Key = VK_F2 then
    GridDBTableView1.GoToNextScrollbarAnnotation([dxErrorScrollbarAnnotationID], not (ssShift in Shift))
end;

procedure TfrmGridScrollbarAnnotations.GridDBTableView1StylesGetContentStyle(
  Sender: TcxCustomGridTableView; ARecord: TcxCustomGridRecord;
  AItem: TcxCustomGridTableItem; var AStyle: TcxStyle);
begin
  if not ARecord.IsData then
    Exit;
  if ARecord.Values[GridDBTableView1Completed.Index] then
    AStyle := dmAutoGenerateData.cxStyle1;
end;

function TfrmGridScrollbarAnnotations.NeedSetup: Boolean;
begin
  Result := True;
end;

initialization
  dxFrameManager.RegisterFrame(GridScrollbarAnnotationsFrameID, TfrmGridScrollbarAnnotations,
    GridScrollbarAnnotationsFrameName, -1, TableBandedTableGroupIndex, -1, -1);

end.
